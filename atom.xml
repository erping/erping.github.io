<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[薛定谔的喵]]></title>
  <subtitle><![CDATA[成长之路]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-05T01:52:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[erping]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[位运算]]></title>
    <link href="http://yoursite.com/2016/01/04/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2016/01/04/位运算/</id>
    <published>2016-01-04T13:28:29.000Z</published>
    <updated>2016-01-05T01:52:34.000Z</updated>
    <content type="html"><![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="external">喝咖啡</a></strong></p>
<p>在计算机中数字是以二进制存储运算的，除了加减乘除等代数运算，与非等逻辑关系运算用二进制也十分方便。平时习惯了十进制的，思维难免有所局限，有些问题合理利用位运算性质常常能够简单快速的解决。下面我就介绍一下位运算的常用性质以及相关问题。</p>
<p><strong>1.判断奇偶性</strong></p>
<p>要想判断一个数的奇偶性，我们恐怕第一反应就是将其除以2然后看起余数。<br>这样肯定是可以的，但是这是不是最快的呢？既然问了这个问题，那答案显然就不是啦。计算机里的二进制数据做除法是很复杂的，所以我们得转换一下思路。奇数偶数在二进制里特点很明显，最后一位如果是1那显然就是奇数，如果是0那就是偶数。于是问题转化为判断最后一位是0是1，这用一个运算速度很快的&amp;（与）操作就能完成。示例代码如下</p>
<p>  int isOdd(int x)<br>{</p>
<pre><code>int <span class="literal">a</span>=<span class="number">0</span>x01<span class="comment">;</span>

<span class="keyword">return</span> (x&amp;<span class="literal">a</span>)<span class="comment">;</span>
</code></pre><p>}</p>
<p><strong>2.交换两个数</strong></p>
<p>在排序算法中经常涉及到交换两个数a,b，这个也不难，引入一个中间变量即可。但是如果加入一个限制条件，不允许有中间变量，那怎么办呢？思索一下，有的人可能会想到这样做</p>
<blockquote>
<p>a = a + b; b = a - b; a = a - b;</p>
</blockquote>
<p>很好，上面的方法没有用到中间变量实现了两个数的交换。还有没有其他方法呢？不了解同或异或及其性质的童鞋恐怕就很难想出来了。</p>
<p>同或，就是相同为1，不同为0，用符号表示就是</p>
<blockquote>
<p>1⊙1 = 1，0⊙0 = 1，0⊙1 = 0,1⊙0 = 0</p>
</blockquote>
<p>异或，就是不同为1，相同为0，用符号表示</p>
<blockquote>
<p>1⊕0 = 1，0⊕1 = 1, 0⊕0 = 0,1⊕1 = 0</p>
</blockquote>
<p>从上面的定义中我们可以推出一些基本性质，对于异或来说就是<strong>a⊕a=0, a⊕0=a</strong>,根据这两条性质我们就可以完成上面提出的问题。</p>
<blockquote>
<p>a = a⊕b; b = a⊕b; a = a⊕b;</p>
</blockquote>
<p>而且从形式上看，两种方法是极其相似的。</p>
<p><strong>3.寻找奇数出现</strong></p>
<p>标题说的不太清楚，这个问题是有一个整型数组A，其中只有一个数出现了奇数次，其他的数都出现了偶数次，找到这个数，要求时间复杂度为O(N)，额外空间复杂度为O(1)。</p>
<p>看到这个偶数次脑海里是不是马上想起了a⊕a=0，恭喜你，解决问题的关键就在这。因为数组里只有一个数出现了奇数次，我们把所有数迭代做异或，那么出现偶数次的数异或结果为0(有点像消消乐，把那些成对的消掉了)，最后的结果就是0异或那个出现奇数次的数，根据性质a⊕0=a,所以最终迭代结果就是那个数。示例代码如下</p>
<p>  int findOdd(vector<int> A, int n)</int></p>
<p>{</p>
<pre><code><span class="keyword">int</span> i;
<span class="keyword">int</span> odd=<span class="number">0</span>;
<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)
    odd ^= A[i];  <span class="comment">//a^a=0; a^0 = a</span>
<span class="keyword">return</span> odd;
</code></pre><p>}</p>
<p>位运算用途广泛，除了上面几个方面还常用于清零，提取某些位，移位等等，因为直接操作位，一般速度很快，所以搜索引擎里也能看到其身影。下次遇到问题不妨先想一下位运算能不能解决呢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="externa]]>
    </summary>
    
      <category term="位运算 异或" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97-%E5%BC%82%E6%88%96/"/>
    
      <category term="tech" scheme="http://yoursite.com/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[short URL]]></title>
    <link href="http://yoursite.com/2015/12/12/short-URL/"/>
    <id>http://yoursite.com/2015/12/12/short-URL/</id>
    <published>2015-12-12T09:44:10.000Z</published>
    <updated>2015-12-13T01:50:05.000Z</updated>
    <content type="html"><![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="external">喝咖啡</a></strong></p>
<p>之前在看&lt;&lt;文明之光&gt;&gt;的时候，作者吴军会在一些引用或者参考文献给出链接，好让读者进一步了解内容。但是我发现很多链接都是t.cn开头后面再跟上几个很随机的数字字母，当时有点纳闷，这个网站能包罗如此题材丰富的内容？顺便还鄙视了一下这域名太差了吧，一点含义都没,后面的随机字符又是什么鬼。后来偶然间好像是在豆瓣上又看到一个这样的链接，这次我的好奇心被彻底勾了起来，马上搜索了一下，这就是我们今天的主题<strong>短URL</strong>。</p>
<p>短URL，顾名思义就是把一个长的域名变为短的域名。那这有什么用呢？就比如我上面提到的吴军书中给的链接，你在浏览器中只要输入10个左右字符就可以代替原来可能十几甚至几十个的字符的链接，是不是感觉又可以愉快的玩耍了。吴军老师连这种细节都考虑到了，真是让人佩服啊。除此以外，一条微博规定不能超过140字符，如果你想带一个链接很可能话都说不了了，短信也差不多。这时候短URL简直就是神器有木有。</p>
<p>上面提到的t.cn是新浪提供的短网址服务，<a href="https://goo.gl/" target="_blank" rel="external">谷歌</a>，<a href="http://dwz.cn/" target="_blank" rel="external">百度</a>等也都有自己的服务。下图是我用谷歌把自己博客网址变短的效果图。<br><img src="http://7xp01p.com1.z0.glb.clouddn.com/short_urlshort_url.jpg" alt="short_url"></p>
<p>废话说了这么多，那短网址服务的原理是什么呢？我们不妨从实际生活中寻找一些灵感。众所周知，俄国人的名字是很长的，比如&lt;&lt;钢铁是怎样炼成的&gt;&gt;作者全名叫做尼古拉·阿耶克塞耶维奇·奥斯特洛夫斯基。想象一下我们的小尼古拉在上学的时候，老师要找他的考试成绩会按照名字来找么。显然不会，我们已经想到学生都会有一个学号，这个学号就代表了这个人名。对人名的操作会映射到学号上来，学号简单规范，方便不少。这样想来，短URL就相当于原来长URL的学号，我们要做的就是找一个两者之间的映射而已。</p>
<p>那这个映射有什么要求呢？显然不同网址映射后不能相同，再者对于一个映射后的短网址能够逆向解析出唯一一个原来的长网址。这些都是必须的要求，在这个基础上，映射后的短地址尽量要短。下面用数学语言来描述一下。</p>
<p>短址本质上是实现了一个映射函数 f: X -&gt; Y 。而这个映射函数必须同时具有两个特点：</p>
<ul>
<li>如果 x1 != x2, 则 f (x1) != f(x2);</li>
<li>对于每一个 y, 能够找到唯一的一个 x 使得 f(x) = y;</li>
</ul>
<p>假设我们现在有了短地址，浏览器是如何找到原来的长地址的呢？当我们在浏览器输入<a href="http://goo.gl/XdWWYX" target="_blank" rel="external">http://goo.gl/XdWWYX</a>时，DNS首先解析出goo.gl的IP地址，然后会向其发出HTTP GET请求查询XdWWYX。这个时候goo.gl服务器会逆向解析出长URL erping.github.io 再返回浏览器一个HTTP 301 重定向到长URL，后面就跟访问普通网站一样了。</p>
<p>至此，短网址基本讲清楚了。如果想要了解具体用什么映射实现的请往下看。</p>
<p>短URL长度一般6位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以6位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p>
<p>假设我们用数据库来保存长地址和短地址的映射，那么，在表 LongtoShortURL 中，我们会有三列：</p>
<ol>
<li>ID，int,  自动增长；</li>
<li>LURL，varchar;  // 长URL；</li>
<li>SURL, varchar; // 短URL。</li>
</ol>
<p>现在我们考虑通过如何长URL得到唯一的短URL。</p>
<p>在讲具体算法以前，先提一个问题：10进制数和16进制数之间的转换是否满足刚刚提到的映射函数 f: X -&gt; Y中的两个条件？答案： 是。</p>
<p>本文的思路也是利用进制之间的转换。因为我们总共有 62 个字母([a-z],[A-Z],[0-9])，我们可以自创一种进制，叫做 62 进制。其规则如下：</p>
<blockquote>
<p>0  -&gt;  a<br>1  -&gt;  b<br>2  -&gt;  c<br>…..<br>61 -&gt;  9</p>
</blockquote>
<p>所以，对于每一个长地址，我们可以根据它的ID，将其用62进制表示得到一个6位的 62 进制数，这个6位的 62 进制数就是我们的短址。比如，对于 ID = 138，62进制表示为2余14，转化为6位表示为[0,0,0,0,2,14]，根据上面的对应规则表，我们可以得到其对应的短址为：aaaabn 。</p>
<p>当我们想通过短址找到所对应的长地址，方法也很简单，就是把62进制数转成10进制数即可，这样我们就可以得到长地址的ID了。比如，对于短址aaae9a，其62进制为[0, 0, 0, 4,61,0] ，则其长地址的ID 为[0, 0, 0, 4,61,0] = 0×62^5+ 0×62^4 + 0×62^3 + 4×62^2 + 61×62^1 + 0×62^0 = 1915810。有了ID，我们自然就可以得到长地址了。</p>
<p>参考：<br><a href="http://stackoverflow.com/questions/742013/how-to-code-a-url-shortener" target="_blank" rel="external">http://stackoverflow.com/questions/742013/how-to-code-a-url-shortener</a><br><a href="http://blog.csdn.net/beiyeqingteng/article/details/7706010" target="_blank" rel="external">http://blog.csdn.net/beiyeqingteng/article/details/7706010</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="externa]]>
    </summary>
    
      <category term="short_url" scheme="http://yoursite.com/tags/short-url/"/>
    
      <category term="tech" scheme="http://yoursite.com/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[about]]></title>
    <link href="http://yoursite.com/2015/12/08/about/"/>
    <id>http://yoursite.com/2015/12/08/about/</id>
    <published>2015-12-08T06:54:57.000Z</published>
    <updated>2015-12-08T06:54:57.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo你的博客]]></title>
    <link href="http://yoursite.com/2015/12/08/hexo-your-blog/"/>
    <id>http://yoursite.com/2015/12/08/hexo-your-blog/</id>
    <published>2015-12-08T03:46:12.000Z</published>
    <updated>2015-12-08T07:43:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="external">喝咖啡</a></strong></p>
<p>很早以前就在自己的Todo List里加入了写博客一项，只是懒癌发作迟迟没有动手。最近闲来无事，便花了点时间折腾了一番。其实之前在vps上搭建了WordPress,但是感觉主题太丑，加功能什么的操作复杂，自己都不愿意访问，后来就搁浅了。这次决定在GitHub写了，然后看了看推荐比较多的hexo，逼格满满啊，马上就开始动手了。于是就有了这篇处女博，大概记录一下过程，供人参考。</p>
<p>为了贯彻落实不重复造轮子的理念（一个字，懒），我还是给一个链接吧，<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a>,这篇博客详细的写了整个搭建过程，写的很好。我基本就是按照这个来的，大问题没有，中间出了点小问题就是本地搭建完成访问没问题，但是部署到GitHub上后没效果，纠结了一会上网查了以后发现是在配置文件里每个配置项的冒号：后要加一个空格才能写内容。我就是少了一个空格，所以一直没有把代码提交上去。关键是他还不报错，就算报错也不能精确定位，这也算是hexo的一个不足之处。不过瑕不掩瑜，hexo简约，大方，还是很方便滴。</p>
<p>博客建完以后，爱折腾的人估计会对主题不太满意，没关系，开源社区里早就有人开发了多种主题供您挑选，满足个性化需求。<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">好看的hexo主题</a>里面家顺张的回答里根据star数做了一个排名，多试一试总会找到符合心意的，顺便说一下从网站下面可以看到我的主题是Next。Next主题的安装配置<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">在这里</a>。</p>
<p>本来想写成一个一步步搭建hexo的博客，结果成了一个介绍别人搭建hexo博客的博客，/(ㄒoㄒ)/~~。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>转载请注明作者及出处，如果你觉得这篇文章对你有帮助或启发，也可以来请我<a href="http://7xp01p.com1.z0.glb.clouddn.com/1449296258436.jpg" target="_blank" rel="externa]]>
    </summary>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Essay" scheme="http://yoursite.com/categories/Essay/"/>
    
  </entry>
  
</feed>
